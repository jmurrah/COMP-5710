"""
COMP-5710 Workshop 6: Data Flow Analysis (data structure usage/locations)
Author: Jacob Murrah
Date: 10/14/2025

NOTE: For locations in 'analysis.py' I mark all usages (in any way) of variables that have the specified data type.
      I include passing in variables into another function, return statement, and etc. as a usage.
      I did NOT include type hints of a function's return value as a usage of the data type.
"""

- dictionaries
    Locations (Lines #): 20, 32, 54, 55, 57, 61, 83, 85, 88, 92, 113, 115, 116, 121, 123, 124, 131, 134, 135, 136, 153, 155, 189, 192, 197, 208, 213, 217, 225, 241, 250, 251, 306, 311, 315, 116, 325, 340
    assignment_map, module_env, and other env dictionaries map scope or variable names to AST nodes or evaluated values, letting the analyzer resolve assignments and evaluate expressions.

- lists
    Locations (Lines #): 39, 43, 47, 49, 67, 76, 81, 83, 84, 87, 90, 93, 95, 194, 200, 203, 213, 214, 219, 224, 227, 228, 230, 231, 234, 235, 236, 271, 272, 245, 256, 258, 260, 261, 282, 284, 286, 287, 290, 292, 294, 295, 296, 307, 308, 309, 312, 326, 329, 332, 335, 336
    flow_nodes, argument collections, and branch flows keep ordered sequences of values, parameter names, and tainted updates so the final trace (1000->val1->v1->res) comes out in the right order.

- sets
    Locations (Lines #): 92, 190, 193, 197, 209, 213, 221, 225, 242, 252, 255, 256, 263, 264, 267
    tainted_names and related sets track which identifiers currently carry the traced value during function analysis, enabling quick membership checks while propagating taint through assignments and returns.

- tuples
    Locations (Lines #): 109, 110, 214, 230, 234, 235, 236, 284, 287, 288, 290, 291, 292
    Helper utilities like _assignment_pairs and _process_function_statement use tuples to package related data (e.g., (target, value_node) or (additions, returned)) when iterating over assignments and control-flow results.

- AST (abstract syntax tree)
    Locations (Lines #): 19, 25, 31, 40, 45, 55, 57, 71, 72, 103, 104, 106, 107, 109, 110, 111, 161, 163, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 188, 207, 275, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 317, 319, 323, 325, 328, 329, 330, 334, 336, 337, 340
    ast.parse builds an ast.Module tree whose nested nodes (FunctionDef, Assign, Call, Name, BinOp, etc.) capture the structure of calc.py; the analyzer walks and inspects these nodes to understand control and data flow.
